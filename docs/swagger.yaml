basePath: /
definitions:
  models.ChangePasswordInput:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Note:
    properties:
      content:
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      title:
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      user_id:
        type: integer
    required:
    - content
    - title
    type: object
  models.NoteSwagger:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateUserInput:
    properties:
      email:
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    type: object
  models.User:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        type: string
      id:
        example: 1
        type: integer
      notes:
        items:
          $ref: '#/definitions/models.Note'
        type: array
      password:
        minLength: 6
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserSwagger:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для управления заметками
  title: Notes API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Вход в систему по логину и паролю
      parameters:
      - description: Credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /notes:
    get:
      description: Возвращает список всех заметок
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NoteSwagger'
            type: array
      summary: Получить все заметки
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: Создает новую заметку по переданным данным
      parameters:
      - description: Данные заметки
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.NoteSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Создать новую заметку
      tags:
      - notes
  /notes/{id}:
    delete:
      description: Удаляет заметку по ID
      parameters:
      - description: ID заметки
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Удалить заметку
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: Обновляет заметку по ID
      parameters:
      - description: ID заметки
        in: path
        name: id
        required: true
        type: integer
      - description: Обновленные данные
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.Note'
      - description: Обновленные данные
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.NoteSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Обновить заметку
      tags:
      - notes
  /register:
    post:
      consumes:
      - application/json
      description: Создание нового пользователя
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSwagger'
            type: array
      summary: Получить всех пользователей
      tags:
      - users
  /users/{id}:
    delete:
      description: Удаляет пользователя по ID. Доступно только для владельца токена.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Удалить пользователя
      tags:
      - users
    get:
      description: Возвращает информацию о пользователе по ID. Доступно только для
        владельца токена.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить пользователя по ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Обновляет информацию о пользователе по ID. Доступно только для
        владельца токена.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Данные пользователя для обновления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Обновить пользователя
      tags:
      - users
  /users/me/password:
    put:
      consumes:
      - application/json
      description: Смена пароля для текущего авторизованного пользователя
      parameters:
      - description: Старый и новый пароли
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Сменить пароль
      tags:
      - users
swagger: "2.0"
